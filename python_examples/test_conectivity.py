"""
Script de teste para validar as melhorias na conectividade do Supabase
"""

import sys
import os
import logging
from robust_supabase_client import RobustSupabaseClient

# Configurar logging para testes
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_robust_supabase_client():
    """
    Testa o cliente Supabase robusto
    """
    print("üß™ Testando Cliente Supabase Robusto")
    print("=" * 50)
    
    # Configura√ß√µes de teste
    SUPABASE_URL = "https://obtuvufykxvbzrykpqvm.supabase.co"
    SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY", "test_key")
    
    # Criar cliente
    client = RobustSupabaseClient(
        url=SUPABASE_URL,
        api_key=SUPABASE_API_KEY,
        max_retries=2,
        timeout=10
    )
    
    # Teste 1: Verifica√ß√£o de DNS
    print("\n1. Testando resolu√ß√£o DNS...")
    hostname = SUPABASE_URL.replace("https://", "").replace("http://", "")
    dns_ok = client._check_dns_resolution(hostname)
    print(f"   DNS para {hostname}: {'‚úÖ OK' if dns_ok else '‚ùå FALHA'}")
    
    # Teste 2: Verifica√ß√£o de conectividade
    print("\n2. Testando conectividade HTTP...")
    connectivity_ok = client._check_connectivity()
    print(f"   Conectividade HTTP: {'‚úÖ OK' if connectivity_ok else '‚ùå FALHA'}")
    
    # Teste 3: Teste completo de conex√£o
    print("\n3. Testando conex√£o completa...")
    connection_ok = client.test_connection()
    print(f"   Conex√£o completa: {'‚úÖ OK' if connection_ok else '‚ùå FALHA'}")
    
    # Teste 4: Simula√ß√£o de atualiza√ß√£o (se conectividade OK)
    if connection_ok:
        print("\n4. Testando atualiza√ß√£o com retry...")
        try:
            # Dados de teste (n√£o vai funcionar sem dados reais, mas testa o mecanismo)
            success = client.update_with_retry(
                table_name="payments",
                update_data={"status": "test"},
                filter_column="registration_id",
                filter_value="test_id"
            )
            print(f"   Atualiza√ß√£o com retry: {'‚úÖ OK' if success else '‚ùå FALHA (esperado sem dados reais)'}")
        except Exception as e:
            print(f"   Atualiza√ß√£o com retry: ‚ùå ERRO - {str(e)}")
    else:
        print("\n4. Pulando teste de atualiza√ß√£o (sem conectividade)")
    
    print("\n" + "=" * 50)
    print("üèÅ Teste conclu√≠do")
    
    return dns_ok, connectivity_ok, connection_ok

def test_network_diagnostics():
    """
    Executa diagn√≥sticos de rede b√°sicos
    """
    print("\nüåê Diagn√≥sticos de Rede")
    print("=" * 50)
    
    import socket
    import requests
    
    # Teste 1: Conectividade b√°sica
    print("\n1. Testando conectividade b√°sica...")
    try:
        socket.create_connection(("8.8.8.8", 53), timeout=5)
        print("   Conectividade b√°sica: ‚úÖ OK")
        basic_ok = True
    except OSError as e:
        print(f"   Conectividade b√°sica: ‚ùå FALHA - {str(e)}")
        basic_ok = False
    
    # Teste 2: Resolu√ß√£o DNS para dom√≠nios conhecidos
    print("\n2. Testando resolu√ß√£o DNS...")
    test_domains = ["google.com", "github.com", "supabase.co"]
    dns_results = {}
    
    for domain in test_domains:
        try:
            socket.gethostbyname(domain)
            print(f"   DNS {domain}: ‚úÖ OK")
            dns_results[domain] = True
        except socket.gaierror as e:
            print(f"   DNS {domain}: ‚ùå FALHA - {str(e)}")
            dns_results[domain] = False
    
    # Teste 3: Conectividade HTTPS
    print("\n3. Testando conectividade HTTPS...")
    test_urls = ["https://google.com", "https://github.com"]
    https_results = {}
    
    for url in test_urls:
        try:
            response = requests.get(url, timeout=10)
            print(f"   HTTPS {url}: ‚úÖ OK (status: {response.status_code})")
            https_results[url] = True
        except Exception as e:
            print(f"   HTTPS {url}: ‚ùå FALHA - {str(e)}")
            https_results[url] = False
    
    return basic_ok, dns_results, https_results

def main():
    """
    Executa todos os testes
    """
    print("üöÄ Iniciando Testes de Conectividade")
    print("=" * 60)
    
    # Diagn√≥sticos de rede
    basic_ok, dns_results, https_results = test_network_diagnostics()
    
    # Testes do cliente Supabase
    dns_ok, connectivity_ok, connection_ok = test_robust_supabase_client()
    
    # Resumo final
    print("\nüìä RESUMO FINAL")
    print("=" * 60)
    print(f"Conectividade b√°sica: {'‚úÖ' if basic_ok else '‚ùå'}")
    print(f"DNS geral: {'‚úÖ' if all(dns_results.values()) else '‚ùå'}")
    print(f"HTTPS geral: {'‚úÖ' if all(https_results.values()) else '‚ùå'}")
    print(f"DNS Supabase: {'‚úÖ' if dns_ok else '‚ùå'}")
    print(f"Conectividade Supabase: {'‚úÖ' if connectivity_ok else '‚ùå'}")
    print(f"Cliente Supabase: {'‚úÖ' if connection_ok else '‚ùå'}")
    
    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    if not basic_ok:
        print("   - Verificar conex√£o de internet")
    if not all(dns_results.values()):
        print("   - Verificar configura√ß√µes de DNS")
    if not dns_ok:
        print("   - Verificar se o dom√≠nio Supabase est√° correto")
        print("   - Verificar firewall/proxy corporativo")
    if not connectivity_ok:
        print("   - Verificar se a API key do Supabase est√° correta")
        print("   - Verificar se o projeto Supabase est√° ativo")

if __name__ == "__main__":
    main()

